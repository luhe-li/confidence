%This function prepares the visual stimuli by putting all the blobs together
%and convert it to a texture. Using function Screen('DrawTexture') is faster.
function flickerTx = generateFlickers(VSinfo,ExpInfo,ScreenInfo,windowPtr,i)
    %size of each check pixel is 4 by 4
    replictation = VSinfo.FlickerNumPixel; 
    height = 800;
    
    %first compute the location of the visual stimulus in pixels
    loc_pixel = round(ExpInfo.randVisPixel(i));
    targetLoc = [ScreenInfo.xmid + loc_pixel,ScreenInfo.yaxis-ScreenInfo.liftingYaxis];
    num_dots = 100;
    RNcoordinates = round(rand(num_dots,2) .* repmat([ScreenInfo.yaxis/replictation,ScreenInfo.xaxis/replictation],num_dots,1));
    
    coherPDF = mvnpdf(RNcoordinates,targetLoc,[40,0;0,40]);
    coherPDF = coherPDF ./ sum(coherPDF) .*160;
    num_frames = VSinfo.numFrames;
    frameBin = randi([0 1],num_dots,num_frames);
    ideal = repmat([0;0;1;1],num_frames./4,1);
    include = 0;
    for f = 1:num_frames
        randInx = rand(num_dots,1)<coherPDF;
        frameBin(randInx,f) = ideal(f);
        frameBin(~randInx,f) = randi([0 1],sum(~randInx),1);
        include = include + sum(randInx);
    end
    %randomly generate brightness between 0 and 255

    gwnM_repeated = NaN(ScreenInfo.yaxis,ScreenInfo.xaxis,VSinfo.GWNnumFrames);
    for n = 1:VSinfo.numFrames
        gwnM = zeros(ScreenInfo.yaxis/replictation,ScreenInfo.xaxis/replictation);
        gwnM(sub2ind(RNcoordinates(:,1),RNcoordinates(:,2)]) = frameBin(:,n) .* 255;
        noise = kron(gwnM(:,:),ones(replictation));
        % empty the upper and lower band of noisy background
        noise(1:(ScreenInfo.y2_lb-height),:) = 0;
        noise((ScreenInfo.y2_ub+height):end,:) = 0;
        % overlay with gray background
        gwnM_repeated(:,:,n) = VSinfo.greyScreen' + noise;
%         gwnM_repeated(:,:,n) = kron(gwnM(:,:,n),ones(replictation));
        % cut the upper and lower region
        %turn it to texture
        flickerTx(n) =  Screen('MakeTexture', windowPtr, gwnM_repeated(:,:,n));
    end
end
