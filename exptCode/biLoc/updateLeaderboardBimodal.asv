function leaderboardText = updateLeaderboardBimodal(outDir, ExpInfo, Resp)
    % updateLeaderboardBimodal Updates or creates the leaderboard for a bimodal psychology task.
    %
    % Syntax:
    %   leaderboardText = updateLeaderboardBimodal(outDir, ExpInfo, Resp)
    %
    % Inputs:
    %   outDir    - String. The output directory where 'sub_info.csv' is stored.
    %   ExpInfo   - Struct with fields:
    %                .subjInit - String. Subject identifier.
    %                .session  - String. Session number as a string ('1', '2', '3', or '4').
    %   Resp      - Struct with field:
    %                .point    - Numeric array. Points earned in the session.
    %
    % Outputs:
    %   leaderboardText - String. Formatted leaderboard text for the current session.

    % Define the CSV file path
    csvPath = fullfile(outDir, 'sub_info.csv');

    % Check if sub_info.csv exists
    if ~exist(csvPath, 'file')
        % Create a new table with appropriate variable types
        sub_info = table('Size', [0 7], ...
                         'VariableTypes', {'cellstr', 'double', 'double', 'double', 'double', 'double', 'double'}, ...
                         'VariableNames', {'sub_name', 'sub_id', 'ses1_pt', 'ses2_pt', 'ses3_pt', 'ses4_pt', 'avg_pt'});
    else
        % Read the existing CSV file
        sub_info = readtable(csvPath);
    end

    % Check if the current subject exists in the table
    subjectIdx = find(strcmp(sub_info.sub_name, ExpInfo.subjInit), 1);

    % Convert ExpInfo.session to number
    sessionNum = str2double(ExpInfo.session);

    % Check if sessionNum is valid
    if isnan(sessionNum) || sessionNum < 1 || sessionNum > 4
        error('Invalid session number. Must be between 1 and 4.');
    end

    % Get the column name for the current session
    ses_pt_names = {'ses1_pt', 'ses2_pt', 'ses3_pt', 'ses4_pt'};
    sesColName = ses_pt_names{sessionNum};

    if isempty(subjectIdx)
        % Subject does not exist; create a new entry

        % Assign a new sub_id
        if isempty(sub_info.sub_id)
            new_sub_id = 1;
        else
            new_sub_id = max(sub_info.sub_id) + 1;
        end

        % Calculate total points earned in the session
        total_pt = sum([Resp.point]);

        % Initialize session points
        session_points = zeros(1, 4);

        % Set the point for the current session
        session_points(sessionNum) = total_pt;

        % Compute avg_pt
        avg_pt = total_pt;

        % Create a new row for the subject
        newRow = table({ExpInfo.subjInit}, new_sub_id, session_points(1), session_points(2), session_points(3), session_points(4), avg_pt, ...
            'VariableNames', {'sub_name', 'sub_id', 'ses1_pt', 'ses2_pt', 'ses3_pt', 'ses4_pt', 'avg_pt'});

        % Append the new row to the existing table
        sub_info = [sub_info; newRow];

        % Write the updated table back to the CSV file
        writetable(sub_info, csvPath);

        % Display confirmation message
        disp('New subject added and points recorded for this session.');
    else
        % Subject exists; update the existing entry

        % Calculate total points earned in the session
        total_pt = sum([Resp.point]);

        % Check if the point under this session is zero
        if sub_info.(sesColName)(subjectIdx) == 0
            % Update it by total_pt
            sub_info.(sesColName)(subjectIdx) = total_pt;

            % Recompute avg_pt
            session_points = [sub_info.ses1_pt(subjectIdx), sub_info.ses2_pt(subjectIdx), ...
                              sub_info.ses3_pt(subjectIdx), sub_info.ses4_pt(subjectIdx)];
            nonZeroSessions = session_points(session_points > 0);
            avg_pt = mean(nonZeroSessions);
            sub_info.avg_pt(subjectIdx) = avg_pt;

            % Write the updated table back to the CSV file
            writetable(sub_info, csvPath);

            % Display confirmation message
            disp('Existing subject updated with new points for this session.');
        else
            disp('Points for this session have already been recorded.');
        end
    end

    % Initialize the output text
    leaderboardText = '';

    % Sort the table based on avg_pt in descending order
    sorted_table = sortrows(sub_info, 'avg_pt', 'descend');

    % Assign ranks based on sorted order
    sorted_table.rank = (1:height(sorted_table))';

    % Initialize the leaderboard string with an explanation
    explanation = 'Leaderboard for the Localization Task:\n\n';

    % Create a header for the table
    header = sprintf('%-20s %-5s %-20s', 'Name', 'Rank', 'Session-average points');

    % Start building the leaderboard text
    leaderboardText = [explanation, header, '\n'];

    % Iterate through each row to append subject details
    for i = 1:height(sorted_table)
        name = sorted_table.sub_name{i};
        rank = sorted_table.rank(i);
        avg_points = sorted_table.avg_pt(i);
        rowText = sprintf('%-20s %-5d %.2f', name, rank, avg_points);
        leaderboardText = [leaderboardText, rowText, '\n'];
    end
end