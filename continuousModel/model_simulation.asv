
clear; close all; rng('shuffle');

%% set environment

useCluster = false;

% set cores
if ~exist('useCluster', 'var') || isempty(useCluster)
    useCluster                  = false;
end

% job/sample = 100, core/run = 3, fit once
switch useCluster
    case true
        if ~exist('numCores', 'var') || isempty(numCores)
            numCores  = maxNumCompThreads;
        end
        hpc_job_number = str2double(getenv('SLURM_ARRAY_TASK_ID'));
        if isnan(hpc_job_number), error('Problem with array assigment'); end
        fprintf('Job number: %i \n', hpc_job_number);
        

        % make sure Matlab does not exceed this
        fprintf('Number of cores: %i  \n', numCores);
        maxNumCompThreads(numCores);
        if isempty(gcp('nocreate'))
            parpool(numCores);
        end

    case false
        numCores = feature('numcores');
       
end

%% manage paths

restoredefaultpath;
[project_dir, ~]= fileparts(pwd);
[git_dir, ~] = fileparts(project_dir);
addpath(genpath(fullfile(project_dir, 'func')));
addpath(genpath(fullfile(git_dir, 'vbmc')));
outDir = fullfile(pwd, mfilename);
if ~exist(outDir, 'dir'); mkdir(outDir); end

%% experiment info

% cm
speaker_cm = 65.5; % cm, left to center
sitting_dist = 113; % cm
screen_cm = 170; % cm

% pixel
screen_px = 1024; % pixel
px_axis = 0:screen_px; % add fence
pixel_per_cm = screen_px/screen_cm;

% dva
screen_dva = rad2deg(atan(screen_cm / 2 / sitting_dist)) .* 2;

% stimulus location in pixel, dva
aud_level = [5 8 9 12];
speaker_level = linspace(-speaker_cm, speaker_cm, 16);
sA = round(speaker_level(aud_level) * pixel_per_cm);
sV = sA; % assume audiovisual bias corrected
sAV = combvec(sA, sV);
delta_px = unique(abs(sA - sV'));
delta_dva = rad2deg(atan(delta_px / pixel_per_cm / 2 / sitting_dist)) .* 2;

%% set simulation parameters

%         aA,     bA, sigV1,  sigA,   sigV2,  sigP,  sigConf, sig pCC
GT = [   1.1,   0.1,    1,    3,    4,    8,   0.6,   4,    0.5];
n_para    = length(GT);

% main models
model_names = {'Optimal','Gaussian optimal','Gaussian suboptimal','Heuristic'};
folders = {'optimal','gauss_optimal','gauss_suboptimal','heuristic'};
n_model = numel(model_names);

% conditions
cue_label = {'Post-cue: A','Post-cue: V'};
n_cue = numel(cue_label);
rel_label = {'High visual reliability','Low visual reliability'};
n_rep = 30; % repitition per condition

%% simulate fake data

sim_d = 1;
fixP.bi_sA = sAV(1,:);
fixP.bi_sV = sAV(2,:);
fixP.n_sA = numel(sA);
fixP.sim_d = sim_d;
fixP.bi_nrep = n_rep;
fixP.px_axis = px_axis;
fixP.maxScore = 100;
fixP.minScore = 1;
fixP.elbow = 50;
fixP.screenX = screen_px;

aA                    = GT(1);
bA                    = GT(2);
sigV1                 = GT(3);
sigA                  = GT(4);
sigV2                 = GT(5);
sigVs                 = [sigV1, sigV2];
sigP                  = GT(6);
sigConf               = GT(7);
pCommon               = GT(8);

muP = 0;
fixP.sigMotor = 1.36; % in deg, measured from first four participants

% 2 modalities(1 = aud, 2 = vis)
% 2 visual reliabilities
% num_rep
% [org_loc, org_conf] = deal(NaN(n_sa,n_sa, n_cue, numel(sigVs), n_rep));

[org_loc, org_conf] = sim_optimal(...
    aA, bA, sigA, sigV1, sigV2, muP, sigP, sigConf, pCommon, fixP);

