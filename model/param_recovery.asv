clear; close all; rng('shuffle');

%% knobs

check_fake_data = false; % check the simulated data before fitting
n_sample = 10; % number of ground-truth samples to generate

%% model info

rng('Shuffle');
specifications = {'MA, full posterior, global','MA, full posterior, local','MA, gaussian posterior','MS','PM'};
folders = {'MA_optimal', 'MA_local', 'MA_gauss', 'MS','PM'};
numbers = (1:numel(specifications))';
model_info = table(numbers, specifications', folders', 'VariableNames', {'Number', 'Specification', 'FolderName'});

%% manege path

restoredefaultpath;
[project_dir, ~]= fileparts(pwd);
[git_dir, ~] = fileparts(project_dir);
% addpath(genpath(fullfile(project_dir, 'data')));
addpath(genpath(fullfile(git_dir, 'bads')));
out_dir = fullfile(pwd, mfilename);
if ~exist(outDir, 'dir'); mkdir(out_dir); end

%% experiment info

% cm
speaker_cm = 65.5; % cm, left to center
sitting_dist = 113; % cm
screen_cm = 170; % cm

% pixel
screen_px = 1024; % pixel
px_axis = 1:screen_px; % add fence
pixel_per_cm = screen_px/screen_cm;

% dva
screen_dva = rad2deg(atan(screen_cm / 2 / sitting_dist)) .* 2;

% stimulus location in pixel, dva
aud_level = [5 7 10 12];
speaker_level = linspace(-speaker_cm, speaker_cm, 16);
sA = speaker_level(aud_level);
sA_dva = rad2deg(atan(sA / 2 / sitting_dist)) .* 2;
sV = sA; % assume audiovisual bias corrected
sAV = combvec(sA, sV);
delta_cm = unique(round(abs(sA - sV'),2));
delta_dva = rad2deg(atan(delta_cm / 2 / sitting_dist)) .* 2;

%% model setup

model.bi_nrep = n_rep;
model.screen_cm = screen_cm;
model.center_axis = linspace(-screen_cm/2, screen_cm/2, 1e3);
model.maxScore = 1;
model.minScore = 0.01;
model.elbow = screen_cm/4; % point goes to 0.01 when confidence range is 1/4 of screen
model.dropRate = (model.maxScore - model.minScore)/model.elbow;
model.n_run = 5;

% conditions
cue_label = {'Auditory post-cue','Visual post-cue'};
n_cue = numel(cue_label);
reps = [20, 30, 50, 70, 1000];

%% set simulation parameters

%         aA,     bA,  sigV1,   sigA,    sigP, sigConf,     pCC
GT = [     1,    0.1,     1,      10,      30,       1,     0.7];
n_para = length(GT);

% simulate and fit for 100 times
n_sim = 100;

for fit_m = 1:numel(folders)

    for i_sample = 1:n_sim

        n_rep = reps(rr);
        curr_model_str = folders{fit_m};

        %% simulate fake data

        model.bi_sA = sAV(1,:);
        model.bi_sV = sAV(2,:);
        model.n_sA = numel(sA);
        model.sim_d = sim_d;
        model.sigMotor = 3; % localization noise, in cm

        addpath(genpath(fullfile(project_dir, curr_model_str)));
        curr_func = str2func(['sim_' curr_model_str]);

        temp_data = curr_func(GT, model);
        sim_data(sim_m, i_sample).data = temp_data;
        sim_data(sim_m, i_sample).gt = GT;

        %% fit fake data

        model.saveR = 0;
        model.mode = 'initialize';
        val = curr_func([], model, []);
        model.initVal = val;

        model.mode = 'optimize';
        llfun = @(x) curr_model(x, model, temp_data);
        printf('[%s] Start parameter recover for model-%s, no. sample-%i \n', mfilename, curr_model_str , i_sample);

            % fit the model multiple times with different initial values
            est_p = nan(model.n_run, val.num_param);
            nll = nan(1, val.num_param);
            parfor i  = 1:model.n_run
                [est_p(i,:), nll(i)] = bads(llfun,...
                    val.init(i,:), val.lb, val.ub, val.plb, val.pub);
            end

            % find the best fits across runs
            [min_nll, best_idx] = min(nll);
            best_p = est_p(best_idx, :);
            fits(sim_m, fit_m, i_sample).best_p = best_p;
            fits(sim_m, fit_m, i_sample).min_nll = min_nll;

    

    end
end